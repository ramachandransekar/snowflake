CREATE OR REPLACE PROCEDURE P_INVOICE_GENERATE()
RETURNS STRING
LANGUAGE SQL
AS

BEGIN
    UPDATE ORDER_PROCESS.ORDER_BASE.T_SALES_ORDER_DETAIL
    SET TOTAL_AMOUNT = QTY * PRICE;

    UPDATE T_SALES_ORDER_HEADER AS SOH
    SET ITEM_COUNT = (
        SELECT COUNT (SOD.ITEM_ID)
        FROM T_SALES_ORDER_DETAIL AS SOD
        WHERE SOD.CUSTOMER_ID = SOH.CUSTOMER_ID
    );

    UPDATE T_SALES_ORDER_HEADER AS SOH
    SET TOTAL_AMOUNT = (
        SELECT SUM(SOD.TOTAL_AMOUNT)
        FROM T_SALES_ORDER_DETAIL AS SOD
        WHERE SOD.CUSTOMER_ID = SOH.CUSTOMER_ID
    );

    UPDATE T_CUSTOMER AS TC
    SET TOTAL_ORDERS = (
        SELECT COUNT(DISTINCT ORDER_ID)
        FROM T_SALES_ORDER_DETAIL AS SOD
        WHERE SOD.CUSTOMER_ID = TC.CUSTOMER_ID
    );

    UPDATE T_SALES_ORDER_HEADER 
    SET DISCOUNT = (
        CASE 
            WHEN TC.CATEGORY = 'Gold' THEN SOH.TOTAL_AMOUNT * 0.05
            WHEN TC.CATEGORY = 'Silver' THEN SOH.TOTAL_AMOUNT * 0.03
            WHEN TC.CATEGORY = 'Bronze' THEN SOH.TOTAL_AMOUNT * 0.01
            WHEN TC.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Coupon_X' THEN 
                                (SOH.TOTAL_AMOUNT  - (SOH.TOTAL_AMOUNT * 0.03))
            WHEN TC.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Coupon_Y' THEN 
                                (SOH.TOTAL_AMOUNT - (SOH.TOTAL_AMOUNT * 0.02))
            WHEN TC.CATEGORY = 'Regular' AND SOH.COUPON_CODE = 'Coupon_Z' THEN 
                                (SOH.TOTAL_AMOUNT - (SOH.TOTAL_AMOUNT * 0.01))
        END
     )
     FROM T_SALES_ORDER_HEADER SOH
     INNER JOIN T_CUSTOMER TC ON SOH.CUSTOMER_ID = TC.CUSTOMER_ID;

     INSERT INTO ORDER_PROCESS.ORDER_BASE.T_INVOICE (ORDER_ID, ORDER_DATE, INVOICE_DATE,
                                                     TAX_AMOUNT, TOTAL_AMOUNT, DISCOUNT,
                                                     FINAL_INVOICE_AMT, CUSTOMER_ID, 
                                                     CREATE_DATE,CREATE_USER)
     SELECT
     SOH.ORDER_ID,
     SOH.ORDER_DATE,
     CURRENT_DATE AS INVOICE_DATE,
     (SOH.TOTAL_AMOUNT * 0.09) AS TAX_AMOUNT,
     SOH.TOTAL_AMOUNT,
     SOH.DISCOUNT,
     SOH.TOTAL_AMOUNT - SOH.DISCOUNT + (SOH.TOTAL_AMOUNT * 0.09) AS FINAL_INVOICE_AMT,
     SOH.CUSTOMER_ID,
     SOH.CREATE_DATE,
     SOH.CREATE_USER
     FROM T_SALES_ORDER_HEADER SOH
     INNER JOIN T_CUSTOMER TC ON SOH.CUSTOMER_ID = TC.CUSTOMER_ID
     WHERE SOH.ORDER_DATE < CURRENT_DATE AND TC.STATUS = 'ACTIVE';

     UPDATE T_CUSTOMER AS TC
        SET  TC.TOTAL_INVOICE_AMOUNT = (
        SELECT SUM(FINAL_INVOICE_AMT)
        FROM ORDER_PROCESS.ORDER_BASE.T_INVOICE AS TN
        WHERE TN.CUSTOMER_ID = TC.CUSTOMER_ID);

    UPDATE T_CUSTOMER AS TC
        SET LOYALTY_POINTS = (
        CASE 
            WHEN TC.CATEGORY = 'Gold' AND TC.TOTAL_INVOICE_AMOUNT >= 1000 THEN 100 
            WHEN TC.CATEGORY = 'Silver' AND TC.TOTAL_INVOICE_AMOUNT >= 1000 THEN 50 
            WHEN TC.CATEGORY = 'Bronze' AND TC.TOTAL_INVOICE_AMOUNT >= 1000 THEN 30 
            ELSE 0
        END);

    RETURN 'updated successfully';
END;


CALL P_INVOICE_GENERATE();